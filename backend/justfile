set windows-shell := ["powershell.exe", "-c"]

# PYTHONPATHに現ディレクトリを設定
export PYTHONPATH := justfile_directory()

PYTHON := "pipenv run python"

AWS_PROFILE := "sf-wikitool"
AWS_REGION := "ap-northeast-1"
AWS_ACCOUNT_ID := "084828571117"
AWS_REPO_ARN := AWS_ACCOUNT_ID + ".dkr.ecr." + AWS_REGION + ".amazonaws.com"
AWS_IMAGE_ID := AWS_REPO_ARN + "/satisfactory-wikitool/backend"


[doc("一番最初のvenvの環境構築を行います。")]
install:
  pipenv install
  {{PYTHON}} -m pip install --upgrade pip
  {{PYTHON}} -m pip install -r requirements.txt

[doc("ローカル環境でbackendを実行します。")]
run:
  {{PYTHON}} -m flask --debug run

[doc("PUBLIC ECRからイメージをpullするための権限を取得します。")]
login-public:
  aws ecr-public get-login-password --profile {{AWS_PROFILE}} --region us-east-1 | \
  docker login --username AWS --password-stdin public.ecr.aws

[doc("ECRを扱うためのAWS権限を取得します。")]
login-private:
  aws ecr get-login-password --profile {{AWS_PROFILE}} --region {{AWS_REGION}} | \
  docker login --username AWS --password-stdin {{AWS_REPO_ARN}}

[doc("dockerイメージを作成します。")]
build: login-public
  docker build -t satisfactory-wikitool/backend:latest .

_push-image branch: build login-private
  docker tag satisfactory-wikitool/backend:latest {{AWS_IMAGE_ID}}:{{branch}}-latest
  docker push {{AWS_IMAGE_ID}}:{{branch}}-latest

[doc("本番環境にbackendをデプロイします。")]
deploy-init branch: (_push-image branch)
  {{PYTHON}} -m zappa.cli deploy --docker-image-uri {{AWS_IMAGE_ID}}:{{branch}}-latest {{branch}}

[doc("本番環境にデプロイした環境を更新します。")]
deploy branch: (_push-image branch)
  {{PYTHON}} -m zappa.cli update --docker-image-uri {{AWS_IMAGE_ID}}:{{branch}}-latest {{branch}}

undeploy branch:
  {{PYTHON}} -m zappa.cli undeploy {{branch}}

[doc("DBにレシピなどの初期データを設定します。")]
db-init:
  {{PYTHON}} -m flask db init; \
  {{PYTHON}} -m flask db migrate -m "Initial migration."; \
  {{PYTHON}} -m flask db upgrade

[doc("DBファイルをすべて削除します。")]
[unix]
db-clear:
  rm -rf satisfactory.db migrations

[windows]
db-clear:
  rm -r -fo satisfactory.db
  rm -r -fo migrations
